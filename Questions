Interview Questions
--------------------
->.What are the differences between null and undefined?
undefined is a type itself (undefined) while null is an object.
In JavaScript null is "nothing". It is supposed to be something that doesn't exist whereas a variable without a value, 
has the value undefined.Unassigned variables are initialized by JavaScript with a default value of
undefined. JavaScript never sets a value to null. That must be done programmatically
You can empty an object by setting it to null:
You can empty a variable by setting it to undefined.


->.What are the differences between == and ===?
First will compare the value and the second will compare the type as well.

->.How would you compare two objects in JavaScript?
The default equality operator in JavaScript for Objects yields true when they refer to the same location in memory.
var x = {};
var y = {};
var z = x;
x === y; // => false
x === z; // => true
If you are working in AngularJS, the angular.equals function will determine if two objects are equal.It does a deep compare on arrays too.

->This keyword in javascript:
"this" is not assigned a value until an object invokes the function where this is defined or used. this has the value of the invoking
object in most circumstances.
eg.
 $ ("button").click (function (event) {
    // $(this) will have the value of the button ($("button")) object​
// because the button object invokes the click () method​
    console.log ($ (this).prop ("name"));
    });

->The use of this in the global scope
In the global scope, when the code is executing in the browser, all global variables and functions are defined on the window object. 
Therefore, when we use this in a global function, it refers to (and has the value of) the global window object 
(not in strict mode though, as noted earlier) that is the main container of the entire JavaScript application or web page.
var firstName = "Peter",
    lastName = "Ally";
    function showFullName () {
    // "this" inside this function will have the value of the window object​
    // because the showFullName () function is defined in the global scope, just like the firstName and lastName​
    console.log (this.firstName + " " + this.lastName);
    }
    
->JavaScript evaluates expressions from left to right.
->You can use the JavaScript typeof operator to find the type of a JavaScript variable.
->Javascript hoisting
  what it does is it moves all the declarations of the variables inside a scope to the top before it start executing.
     function localscope()     ------>after Hoisting 
     {                                         {   var a;
     console.log(a);                               console.log(a);    ---> This will give undefined but doesn't throw an error;
     var a="Hello";                                 a="Hello";
     }                                          }
     // uncaught refernce error a when hoisting would not have been there

CSS Questions:
Using width, max-width and margin: auto;
1.A block-level element always takes up the full width available (stretches out to the left and right as far as it can)
2.Setting the width of a block-level element will prevent it from stretching out to the edges of its container. 
Then, you can set the margins to auto, to horizontally center the element within its container. The element will take up the 
specified width, and the remaining space will be split equally between the two margins:
3.The problem with the <div> above occurs when the browser window is smaller than the width of the element. The browser then adds 
a horizontal scrollbar to the page.
Using max-width instead, in this situation, will improve the browser's handling of small windows. This is important when making a 
site usable on small devices:
